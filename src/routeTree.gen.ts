/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignOutImport } from './routes/sign-out'
import { Route as IndexImport } from './routes/index'
import { Route as publicPublicImport } from './routes/(public)/_public'
import { Route as authAuthImport } from './routes/(auth)/_auth'
import { Route as publicPublicSignUpImport } from './routes/(public)/_public.sign-up'
import { Route as publicPublicSignInImport } from './routes/(public)/_public.sign-in'
import { Route as authAuthProductsImport } from './routes/(auth)/_auth.products'
import { Route as authAuthHomeImport } from './routes/(auth)/_auth.home'
import { Route as authAuthCategoriesImport } from './routes/(auth)/_auth.categories'

// Create Virtual Routes

const publicImport = createFileRoute('/(public)')()
const authImport = createFileRoute('/(auth)')()

// Create/Update Routes

const publicRoute = publicImport.update({
  id: '/(public)',
  getParentRoute: () => rootRoute,
} as any)

const authRoute = authImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const SignOutRoute = SignOutImport.update({
  id: '/sign-out',
  path: '/sign-out',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const publicPublicRoute = publicPublicImport.update({
  id: '/_public',
  getParentRoute: () => publicRoute,
} as any)

const authAuthRoute = authAuthImport.update({
  id: '/_auth',
  getParentRoute: () => authRoute,
} as any)

const publicPublicSignUpRoute = publicPublicSignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => publicPublicRoute,
} as any)

const publicPublicSignInRoute = publicPublicSignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => publicPublicRoute,
} as any)

const authAuthProductsRoute = authAuthProductsImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => authAuthRoute,
} as any)

const authAuthHomeRoute = authAuthHomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => authAuthRoute,
} as any)

const authAuthCategoriesRoute = authAuthCategoriesImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => authAuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/sign-out': {
      id: '/sign-out'
      path: '/sign-out'
      fullPath: '/sign-out'
      preLoaderRoute: typeof SignOutImport
      parentRoute: typeof rootRoute
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/_auth': {
      id: '/(auth)/_auth'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authAuthImport
      parentRoute: typeof authRoute
    }
    '/(public)': {
      id: '/(public)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicImport
      parentRoute: typeof rootRoute
    }
    '/(public)/_public': {
      id: '/(public)/_public'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicPublicImport
      parentRoute: typeof publicRoute
    }
    '/(auth)/_auth/categories': {
      id: '/(auth)/_auth/categories'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof authAuthCategoriesImport
      parentRoute: typeof authAuthImport
    }
    '/(auth)/_auth/home': {
      id: '/(auth)/_auth/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof authAuthHomeImport
      parentRoute: typeof authAuthImport
    }
    '/(auth)/_auth/products': {
      id: '/(auth)/_auth/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof authAuthProductsImport
      parentRoute: typeof authAuthImport
    }
    '/(public)/_public/sign-in': {
      id: '/(public)/_public/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof publicPublicSignInImport
      parentRoute: typeof publicPublicImport
    }
    '/(public)/_public/sign-up': {
      id: '/(public)/_public/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof publicPublicSignUpImport
      parentRoute: typeof publicPublicImport
    }
  }
}

// Create and export the route tree

interface authAuthRouteChildren {
  authAuthCategoriesRoute: typeof authAuthCategoriesRoute
  authAuthHomeRoute: typeof authAuthHomeRoute
  authAuthProductsRoute: typeof authAuthProductsRoute
}

const authAuthRouteChildren: authAuthRouteChildren = {
  authAuthCategoriesRoute: authAuthCategoriesRoute,
  authAuthHomeRoute: authAuthHomeRoute,
  authAuthProductsRoute: authAuthProductsRoute,
}

const authAuthRouteWithChildren = authAuthRoute._addFileChildren(
  authAuthRouteChildren,
)

interface authRouteChildren {
  authAuthRoute: typeof authAuthRouteWithChildren
}

const authRouteChildren: authRouteChildren = {
  authAuthRoute: authAuthRouteWithChildren,
}

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren)

interface publicPublicRouteChildren {
  publicPublicSignInRoute: typeof publicPublicSignInRoute
  publicPublicSignUpRoute: typeof publicPublicSignUpRoute
}

const publicPublicRouteChildren: publicPublicRouteChildren = {
  publicPublicSignInRoute: publicPublicSignInRoute,
  publicPublicSignUpRoute: publicPublicSignUpRoute,
}

const publicPublicRouteWithChildren = publicPublicRoute._addFileChildren(
  publicPublicRouteChildren,
)

interface publicRouteChildren {
  publicPublicRoute: typeof publicPublicRouteWithChildren
}

const publicRouteChildren: publicRouteChildren = {
  publicPublicRoute: publicPublicRouteWithChildren,
}

const publicRouteWithChildren =
  publicRoute._addFileChildren(publicRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof publicPublicRouteWithChildren
  '/sign-out': typeof SignOutRoute
  '/categories': typeof authAuthCategoriesRoute
  '/home': typeof authAuthHomeRoute
  '/products': typeof authAuthProductsRoute
  '/sign-in': typeof publicPublicSignInRoute
  '/sign-up': typeof publicPublicSignUpRoute
}

export interface FileRoutesByTo {
  '/': typeof publicPublicRouteWithChildren
  '/sign-out': typeof SignOutRoute
  '/categories': typeof authAuthCategoriesRoute
  '/home': typeof authAuthHomeRoute
  '/products': typeof authAuthProductsRoute
  '/sign-in': typeof publicPublicSignInRoute
  '/sign-up': typeof publicPublicSignUpRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/sign-out': typeof SignOutRoute
  '/(auth)': typeof authRouteWithChildren
  '/(auth)/_auth': typeof authAuthRouteWithChildren
  '/(public)': typeof publicRouteWithChildren
  '/(public)/_public': typeof publicPublicRouteWithChildren
  '/(auth)/_auth/categories': typeof authAuthCategoriesRoute
  '/(auth)/_auth/home': typeof authAuthHomeRoute
  '/(auth)/_auth/products': typeof authAuthProductsRoute
  '/(public)/_public/sign-in': typeof publicPublicSignInRoute
  '/(public)/_public/sign-up': typeof publicPublicSignUpRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/sign-out'
    | '/categories'
    | '/home'
    | '/products'
    | '/sign-in'
    | '/sign-up'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/sign-out'
    | '/categories'
    | '/home'
    | '/products'
    | '/sign-in'
    | '/sign-up'
  id:
    | '__root__'
    | '/'
    | '/sign-out'
    | '/(auth)'
    | '/(auth)/_auth'
    | '/(public)'
    | '/(public)/_public'
    | '/(auth)/_auth/categories'
    | '/(auth)/_auth/home'
    | '/(auth)/_auth/products'
    | '/(public)/_public/sign-in'
    | '/(public)/_public/sign-up'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SignOutRoute: typeof SignOutRoute
  authRoute: typeof authRouteWithChildren
  publicRoute: typeof publicRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SignOutRoute: SignOutRoute,
  authRoute: authRouteWithChildren,
  publicRoute: publicRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/sign-out",
        "/(auth)",
        "/(public)"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/sign-out": {
      "filePath": "sign-out.tsx"
    },
    "/(auth)": {
      "filePath": "(auth)",
      "children": [
        "/(auth)/_auth"
      ]
    },
    "/(auth)/_auth": {
      "filePath": "(auth)/_auth.tsx",
      "parent": "/(auth)",
      "children": [
        "/(auth)/_auth/categories",
        "/(auth)/_auth/home",
        "/(auth)/_auth/products"
      ]
    },
    "/(public)": {
      "filePath": "(public)",
      "children": [
        "/(public)/_public"
      ]
    },
    "/(public)/_public": {
      "filePath": "(public)/_public.tsx",
      "parent": "/(public)",
      "children": [
        "/(public)/_public/sign-in",
        "/(public)/_public/sign-up"
      ]
    },
    "/(auth)/_auth/categories": {
      "filePath": "(auth)/_auth.categories.tsx",
      "parent": "/(auth)/_auth"
    },
    "/(auth)/_auth/home": {
      "filePath": "(auth)/_auth.home.tsx",
      "parent": "/(auth)/_auth"
    },
    "/(auth)/_auth/products": {
      "filePath": "(auth)/_auth.products.tsx",
      "parent": "/(auth)/_auth"
    },
    "/(public)/_public/sign-in": {
      "filePath": "(public)/_public.sign-in.tsx",
      "parent": "/(public)/_public"
    },
    "/(public)/_public/sign-up": {
      "filePath": "(public)/_public.sign-up.tsx",
      "parent": "/(public)/_public"
    }
  }
}
ROUTE_MANIFEST_END */
